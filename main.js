/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AIWriter
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  apiKey: "1234567890",
  endPoint: "https://YOURNAME.openai.azure.com",
  lang: "English"
};
var myHeaders = new Headers();
myHeaders.append("Content-Type", "application/json");
var AIWriter = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    myHeaders.append("api-key", this.settings.apiKey);
    this.addCommand({
      id: "aiwriter-command-continue",
      name: "Continue text",
      editorCallback: (editor) => {
        const prompt = "You are an AI writing assistant that continues existing text based on context from prior text. Give more weight/priority to the later characters than the beginning ones. Limit your response to no more than 200 characters, but make sure to construct complete sentences.";
        this.writeText(editor, prompt);
      }
    });
    this.addCommand({
      id: "aiwriter-command-rewrite",
      name: "Rewrite text",
      editorCallback: (editor) => {
        const prompt = "You are an AI writing assistant that rewrites the given text to be like an article from a news magazine. Include a Strong Headline, create a Engaging Lead make sure that the text has a clear structure is shows a Balanced Perspective and has Quotes where and when necessary.";
        this.writeText(editor, prompt);
      }
    });
    this.addCommand({
      id: "aiwriter-command-summary",
      name: "Summarize text",
      editorCallback: (editor) => {
        const prompt = "You are an AI writing assistant that summarizes the given text. Limit your response to no more than 1500 characters, but make sure to construct complete sentences.";
        this.writeText(editor, prompt);
      }
    });
    this.addCommand({
      id: "aiwriter-command-prompt",
      name: "Create custom prompt",
      editorCallback: async (editor) => {
        const prompt = await this.openPromptModal();
        if (prompt) {
          this.writeText(editor, prompt);
        }
      }
    });
    this.addSettingTab(new AIWirterSettingTab(this.app, this));
  }
  async writeText(editor, prompt) {
    const noteFile = this.app.workspace.getActiveFile();
    if (noteFile == null ? void 0 : noteFile.name) {
      let text = await this.app.vault.read(noteFile);
      const statusBarItemEl = this.addStatusBarItem();
      statusBarItemEl.setText("Connecting to Azure OpenAI...");
      let langprefix = "You speak and answer in " + this.settings.lang;
      if (this.settings.lang == "auto") {
        langprefix = "Answer in the same language as the inserted input text";
      }
      var raw = JSON.stringify({
        "temperature": 0.7,
        "messages": [
          {
            "role": "system",
            "content": langprefix + ". " + prompt
          },
          {
            "role": "user",
            "content": text
          }
        ]
      });
      var requestOptions = {
        method: "POST",
        headers: myHeaders,
        body: raw
      };
      fetch(this.settings.endPoint + "/openai/deployments/gpt-35-turbo/chat/completions?api-version=2023-05-15", requestOptions).then((response) => response.json()).then((result) => {
        const answer = result.choices[0].message.content;
        editor.replaceSelection(answer);
        statusBarItemEl.setText("");
      }).catch((error) => {
        new import_obsidian.Notice("Error: " + error);
      });
    } else {
      new import_obsidian.Notice("No active note");
    }
  }
  onunload() {
  }
  async openPromptModal() {
    return new Promise((resolve) => {
      const modal = new PropmtModal(this.app, (inputValue) => {
        resolve(inputValue);
      });
      modal.open();
    });
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var PropmtModal = class extends import_obsidian.Modal {
  constructor(app, callback) {
    super(app);
    this.callback = callback;
  }
  onOpen() {
    let { contentEl } = this;
    contentEl.createEl("h6", { text: "Custom AI Writer prompt:" });
    const input = contentEl.createEl("textarea", { attr: { id: "aiprompt", rows: "6", cols: "70" } });
    let t = contentEl.querySelector("#aiprompt");
    t == null ? void 0 : t.setText("You are an AI writing assistant that continues existing text based on context from prior text.");
    contentEl.createEl("br");
    contentEl.createEl("br");
    const clearButton = contentEl.createEl("button", { text: "Clear", attr: { style: "margin:10px;" } });
    clearButton.addEventListener("click", () => {
      t == null ? void 0 : t.setText("");
    });
    const closeButton = contentEl.createEl("button", { text: "Run prompt" });
    closeButton.addEventListener("click", () => {
      this.close();
      this.callback(input.value);
    });
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};
var AIWirterSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Azure OpenAI key").setDesc("Authentication key").addText((text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.apiKey).onChange(async (value) => {
      this.plugin.settings.apiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Azure OpenAI Endpoint").setDesc("Endpoint").addText((text) => text.setPlaceholder("Enter your endpoint").setValue(this.plugin.settings.endPoint).onChange(async (value) => {
      this.plugin.settings.endPoint = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Langauge").setDesc("Choose your language").addDropdown(
      (dropdown) => dropdown.addOption("auto", "Auto detect").addOption("English", "English").addOption("German", "German").setValue(this.plugin.settings.lang).onChange((value) => {
        this.plugin.settings.lang = value;
        this.plugin.saveData(this.plugin.settings);
      })
    );
  }
};
